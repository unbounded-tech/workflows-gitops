name: gitops-promote-helm

on:
  workflow_call:
    inputs:
      name:
        type: string
        required: false

      promotion_chart_path:
        type: string
        required: false
        default: ".gitops/promote/helm"

      destination_path:
        type: string
        required: false
        default: ".gitops/deploy/helm/templates"

      project:
        type: string
        required: true

      environment_name:
        type: string
        required: true

      environment_repository:
        type: string
        required: true

      pull_request:
        type: boolean
        required: false

      values:
        type: string
        required: false
        default: ""

    secrets:
      GH_PAT:
        required: true

jobs:

  gitops-promote-helm:
    name: GitOps Promote - Helm
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name }}
      url: https://github.com/${{ inputs.environment_repository }}

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v4
    
    - name: Checkout Environment Project
      uses: actions/checkout@v4
      with: 
        path: environment
        repository: ${{ inputs.environment_repository }}
        persist-credentials: false
        token: ${{ secrets.GH_PAT }}

    - name: Save existing values
      id: save_values
      run: |
        NAME="${{ inputs.project }}-${{ inputs.name || github.event.repository.name }}"
        DEST_APP_YAML="environment/${{ inputs.destination_path }}/${{ github.event.repository.name }}.yaml"

        echo "{}" > existing_values.yaml

        echo "Checking for existing values from Application $NAME in destination file $DEST_APP_YAML"
        if [ -f "$DEST_APP_YAML" ]; then
          echo "Destination file exists:"
          cat "$DEST_APP_YAML" 
          
          echo "Finding Application..."

          EXISTING_APPLICATION=$(yq eval 'select(.kind == "Application" and .metadata.name == "'$NAME'")' "$DEST_APP_YAML")
          
          # Check if application was found
          if [ -z "$EXISTING_APPLICATION" ] || [ "$EXISTING_APPLICATION" = "null" ]; then
            echo "No Application found with name: $NAME"
            
          else
            echo "Found Application: $NAME"
            
            # Extract existing values from the destination file
            EXISTING_VALUES=$(echo "$EXISTING_APPLICATION" | yq eval '.spec.source.helm.values' -)

            if [ "$EXISTING_VALUES" != "null" ] && [ -n "$EXISTING_VALUES" ]; then
              echo "Existing values:"
              echo "$EXISTING_VALUES"
              
              # Create temporary files for the values
              echo "$EXISTING_VALUES" > existing_values.yaml
            else
              echo "No existing values found, using only new values."
            fi
          fi
        else
          echo "Destination file does not exist, using only new values."
        fi

        echo "Existing values:"
        cat existing_values.yaml

    - name: Create Application in Environment from Promote Helm Chart
      run: |
        DEST_APP_YAML="environment/${{ inputs.destination_path }}/${{ github.event.repository.name }}.yaml"

        mkdir -p environment/${{ inputs.destination_path }}
        helm template ${{ inputs.promotion_chart_path }} \
          --set name=${{ inputs.name || github.event.repository.name }} \
          --set version=${{ github.ref_name }} \
          --set project=${{ inputs.project }} \
          --set repository=${{ github.repository }} \
          --set-literal values="${{ inputs.values }}" \
          > "$DEST_APP_YAML"

    - name: Store new values
      id: store_new_values
      run: |
        NAME="${{ inputs.project }}-${{ inputs.name || github.event.repository.name }}"
        DEST_APP_YAML="environment/${{ inputs.destination_path }}/${{ github.event.repository.name }}.yaml"
        NEW_VALUES=""

        cat "$DEST_APP_YAML"

        echo "Finding Application $NAME in rendered template..."
        APPLICATION=$(yq eval 'select(.kind == "Application" and .metadata.name == "'$NAME'")' "$DEST_APP_YAML")

        if [ -z "$APPLICATION" ] || [ "$APPLICATION" = "null" ]; then
          echo "No Application found with name: $NAME"
        else
          echo "Found Application: $NAME"

          NEW_VALUES=$(echo "$APPLICATION" | yq eval '.spec.source.helm.values' -)
          if [ -z "$NEW_VALUES" ] || [ "$NEW_VALUES" = "null" ]; then
            echo "No helm values found in Application $NAME"
            echo "{}" > new_values.yaml
          else
            echo "$NEW_VALUES" > new_values.yaml
          fi
        fi

        echo "New values:"
        cat new_values.yaml

    - name: Merge Values
      id: merge_values
      run: |
        # Merge the values, with new values taking precedence
        MERGED_VALUES=$(yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' existing_values.yaml new_values.yaml | yq '.' --prettyPrint --no-colors)
        
        if [ -z "$MERGED_VALUES" ] || [ "$MERGED_VALUES" = "null" ]; then
          echo "{}" > merged_values.yaml
          echo "has_values=false" >> $GITHUB_OUTPUT
        else
          echo "$MERGED_VALUES" > merged_values.yaml
          # Check if merged values is just an empty object
          if [ "$MERGED_VALUES" = "{}" ]; then
            echo "has_values=false" >> $GITHUB_OUTPUT
          else
            echo "has_values=true" >> $GITHUB_OUTPUT
          fi
        fi

        echo "Merged values:"
        cat merged_values.yaml

    - name: Replace values with merged values
      if: steps.merge_values.outputs.has_values == 'true'
      run: |
        NAME="${{ inputs.project }}-${{ inputs.name || github.event.repository.name }}"
        DEST_APP_YAML="environment/${{ inputs.destination_path }}/${{ github.event.repository.name }}.yaml"
        
        echo "Replacing values in the generated YAML file with merged values"
        echo "Checking for destination file: $DEST_APP_YAML"
        if [ -f "$DEST_APP_YAML" ]; then
          echo "Destination file exists, finding existing application..."

          EXISTING_APPLICATION=$(yq eval 'select(.kind == "Application" and .metadata.name == "'$NAME'")' "$DEST_APP_YAML")
          
          # Update the Application's helm values with merged values
          yq eval '(select(.kind == "Application" and .metadata.name == "'$NAME'").spec.source.helm.values) = strload("merged_values.yaml")' -i "$DEST_APP_YAML"
          
          echo "Successfully replaced values in $DEST_APP_YAML with merged values"
          
        else
          echo "Destination file does not exist, using only new values."
        fi

        cat "$DEST_APP_YAML"

    - name: Commit Env Changes
      run: |
        cd environment

        if output=$(git status --porcelain) && [ -z "$output" ]; then
          # Working directory clean

          echo "No changes to commit"
        else 
          # Uncommitted changes

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"   
          git add -A
          git commit -m "feat(${{ github.event.repository.name }}): promote to ${{ github.ref_name }}"
        fi

    - name: Push main
      if: inputs.pull_request == false
      uses: ad-m/github-push-action@master
      with:
        directory: environment
        github_token: ${{ secrets.GH_PAT }}
        repository: ${{ inputs.environment_repository }}
    
    - name: Create Pull Request
      if: inputs.pull_request
      uses: peter-evans/create-pull-request@v7
      with:
        path: environment
        branch: promote/${{ github.event.repository.name }}-${{ github.ref_name }}
        token: ${{ secrets.GH_PAT }}
        title: ${{ github.event.repository.name }} to ${{ github.ref_name }}
        body: Promotes ${{ github.event.repository.name }} to ${{ github.ref_name }}