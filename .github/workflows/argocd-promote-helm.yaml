name: argocd-promote-helm

on:
  workflow_call:
    inputs:
      name:
        type: string
        required: false

      promotion_chart_path:
        type: string
        required: false
        default: ".gitops/promote/helm"

      destination_path:
        type: string
        required: false
        default: ".gitops/deploy/helm/templates"

      project:
        type: string
        required: true

      environment_name:
        type: string
        required: true

      environment_repository:
        type: string
        required: true

      create_pull_request:
        type: boolean
        required: false

      values:
        type: string
        required: false
        default: ""

      preview:
        type: boolean
        required: false
        default: false

      comment:
        required: false
        type: string
        default: |
          Your preview environment has been published! :rocket:

      comment_body_includes_text:
        required: false
        type: string
        default: "Your preview environment"

    secrets:
      GH_PAT:
        required: true

jobs:

  gitops-promote-helm:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name }}
      url: https://github.com/${{ inputs.environment_repository }}

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:

    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Helm
      uses: azure/setup-helm@v4

    - name: set name env
      if: inputs.preview == false
      run: |
        NAME="${{ inputs.name || github.event.repository.name }}"
        echo "NAME=$NAME" >> $GITHUB_ENV

    - name: set preview name env
      if: inputs.preview
      run: |
        NAME="${{ inputs.name || github.event.repository.name }}-pr-${{ github.event.pull_request.number }}"
        echo "NAME=$NAME" >> $GITHUB_ENV

    - name: Set Argo Name env
      env:
        NAME: ${{ env.NAME }}
      run: |
        ARGO_NAME=${{ inputs.project }}-${{ env.NAME }}
        echo "ARGO_NAME=$ARGO_NAME" >> $GITHUB_ENV

    - name: Set DESTINATION_YAML Environment Variables
      env:
        NAME: ${{ env.NAME }}
      run: |
        DESTINATION_YAML="environment/${{ inputs.destination_path }}/${{ env.NAME }}.yaml"
        echo "DESTINATION_YAML=$DESTINATION_YAML" >> $GITHUB_ENV

    - name: Set PR Title, Body, and Branch
      if: inputs.create_pull_request && inputs.preview == false
      env:
        NAME: ${{ env.NAME }}
      run: |
        PR_TITLE="Promote ${{ env.NAME }} to ${{ github.ref_name }}"
        PR_BODY="Promotes ${{ env.NAME }} to https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        PR_BRANCH="promote/${{ env.NAME }}-${{ github.ref_name }}"
        echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
        echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV
        echo "PR_BRANCH=$PR_BRANCH" >> $GITHUB_ENV

    - name: Set Preview PR Title, Body, and Branch
      if: inputs.create_pull_request && inputs.preview
      env:
        NAME: ${{ env.NAME }}
      run: |
        PR_TITLE="Preview ${{ env.NAME }}"
        PR_BODY="Preview environment for ${{ github.event.pull_request.html_url }}"
        PR_BRANCH="preview/${{ env.NAME }}"
        echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
        echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV
        echo "PR_BRANCH=$PR_BRANCH" >> $GITHUB_ENV

    - name: Set Commit Message
      if: inputs.preview == false
      env:
        NAME: ${{ env.NAME }}
      run: |
        COMMIT_MESSAGE="feat(${{ env.NAME }}): promote to https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV

    - name: Set Preview Commit Message
      if: inputs.preview
      env:
        NAME: ${{ env.NAME }}
      run: |
        COMMIT_MESSAGE="feat(${{ github.event.repository.name }}): preview ${{ github.event.pull_request.html_url }} ${{ github.event.pull_request.head.sha }}"
        echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV

    - name: Checkout Environment Project
      uses: actions/checkout@v5
      with: 
        path: environment
        repository: ${{ inputs.environment_repository }}
        token: ${{ secrets.GH_PAT }}

    - name: Create or Checkout Preview Branch
      if: inputs.preview
      env:
        PR_BRANCH: ${{ env.PR_BRANCH }}
      run: |
        cd environment
        git fetch origin $PR_BRANCH || git checkout -b $PR_BRANCH
        git checkout $PR_BRANCH

    - name: Save existing argo values
      id: save_values
      env:
        ARGO_NAME: $${{ env.ARGO_NAME }}
        DESTINATION_YAML: ${{ env.DESTINATION_YAML }}
      run: |
        echo "{}" > existing_values.yaml

        echo "Checking for existing values from Application ${{ env.ARGO_NAME }} in destination file ${{ env.DESTINATION_YAML }}"
        if [ -f "${{ env.DESTINATION_YAML }}" ]; then
          echo "Destination file exists:"
          cat "${{ env.DESTINATION_YAML }}" 
          
          echo "Finding Application..."

          EXISTING_APPLICATION=$(yq eval 'select(.kind == "Application" and .metadata.name == "'${{ env.ARGO_NAME }}'")' "${{ env.DESTINATION_YAML }}")
          
          # Check if application was found
          if [ -z "$EXISTING_APPLICATION" ] || [ "$EXISTING_APPLICATION" = "null" ]; then
            echo "No Application found with name: ${{ env.ARGO_NAME }}"
            
          else
            echo "Found Application: ${{ env.ARGO_NAME }}"
            
            # Extract existing values from the destination file
            EXISTING_VALUES=$(echo "$EXISTING_APPLICATION" | yq eval '.spec.source.helm.values' -)

            if [ "$EXISTING_VALUES" != "null" ] && [ -n "$EXISTING_VALUES" ]; then
              echo "Existing values:"
              echo "$EXISTING_VALUES"
              
              # Create temporary files for the values
              echo "$EXISTING_VALUES" > existing_values.yaml
            else
              echo "No existing values found, using only new values."
            fi
          fi
        else
          echo "Destination file does not exist, using only new values."
        fi

        echo "Existing values:"
        cat existing_values.yaml

    - name: Create Application in Environment from Promote Helm Chart
      if: ${{ inputs.preview == false }}
      env:
        NAME: ${{ env.NAME }}
        DESTINATION_YAML: ${{ env.DESTINATION_YAML }}
      run: |
        mkdir -p environment/${{ inputs.destination_path }}
        helm template ${{ inputs.promotion_chart_path }} \
          --set application.name=${{ env.NAME }} \
          --set application.targetRevision=${{ github.ref_name }} \
          --set application.repository=https://github.com/${{ github.repository }}.git \
          --set application.destination.namespace=${{ inputs.project }} \
          --set project=${{ inputs.project }} \
          --set-literal values="${{ inputs.values }}" \
          > "${{ env.DESTINATION_YAML }}"
    
    - name: Create Preview Application in Environment from Promote Helm Chart
      if: inputs.preview
      env:
        NAME: ${{ env.NAME }}
        DESTINATION_YAML: ${{ env.DESTINATION_YAML }}
      run: |
        mkdir -p environment/${{ inputs.destination_path }}
        helm template ${{ inputs.promotion_chart_path }} \
          --set application.name=${{ env.NAME }} \
          --set application.targetRevision=${{ github.event.pull_request.head.ref }} \
          --set application.repository=https://github.com/${{ github.repository }}.git \
          --set application.destination.namespace=${{ env.NAME }} \
          --set application.image.tag=pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }} \
          --set project=${{ inputs.project }} \
          --set-literal values="${{ inputs.values }}" \
          > "${{ env.DESTINATION_YAML }}"

    - name: Store new Argo CD values
      id: store_new_values
      env:
        ARGO_NAME: ${{ env.ARGO_NAME }}
        DESTINATION_YAML: ${{ env.DESTINATION_YAML }}
      run: |
        NEW_VALUES=""

        cat "${{ env.DESTINATION_YAML }}"

        echo "Finding Application ${{ env.ARGO_NAME }} in rendered template..."
        APPLICATION=$(yq eval 'select(.kind == "Application" and .metadata.name == "'${{ env.ARGO_NAME }}'")' "${{ env.DESTINATION_YAML }}")

        if [ -z "$APPLICATION" ] || [ "$APPLICATION" = "null" ]; then
          echo "No Application found with name: ${{ env.ARGO_NAME }}"
        else
          echo "Found Application: ${{ env.ARGO_NAME }}"

          NEW_VALUES=$(echo "$APPLICATION" | yq eval '.spec.source.helm.values' -)
          if [ -z "$NEW_VALUES" ] || [ "$NEW_VALUES" = "null" ]; then
            echo "No helm values found in Application ${{ env.ARGO_NAME }}"
            echo "{}" > new_values.yaml
          else
            echo "$NEW_VALUES" > new_values.yaml
          fi
        fi

        echo "New values:"
        cat new_values.yaml

    - name: Merge Argo CD Values
      id: merge_values
      run: |
        # Merge the values, with new values taking precedence
        MERGED_VALUES=$(yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' existing_values.yaml new_values.yaml | yq '.' --prettyPrint --no-colors)
        
        if [ -z "$MERGED_VALUES" ] || [ "$MERGED_VALUES" = "null" ]; then
          echo "{}" > merged_values.yaml
          echo "has_values=false" >> $GITHUB_OUTPUT
        else
          echo "$MERGED_VALUES" > merged_values.yaml
          # Check if merged values is just an empty object
          if [ "$MERGED_VALUES" = "{}" ]; then
            echo "has_values=false" >> $GITHUB_OUTPUT
          else
            echo "has_values=true" >> $GITHUB_OUTPUT
          fi
        fi

        echo "Merged values:"
        cat merged_values.yaml

    - name: Replace values with merged values
      if: steps.merge_values.outputs.has_values == 'true'
      env:
        DESTINATION_YAML: ${{ env.DESTINATION_YAML }}
        ARGO_NAME: ${{ env.ARGO_NAME }}
      run: |
        
        echo "Replacing values in the generated YAML file with merged values"
        echo "Checking for destination file: ${{ env.DESTINATION_YAML }}"
        if [ -f "${{ env.DESTINATION_YAML }}" ]; then
          echo "Destination file exists, finding existing application..."

          EXISTING_APPLICATION=$(yq eval 'select(.kind == "Application" and .metadata.name == "'${{ env.ARGO_NAME }}'")' "${{ env.DESTINATION_YAML }}")
          
          # Update the Application's helm values with merged values
          yq eval '(select(.kind == "Application" and .metadata.name == "'${{ env.ARGO_NAME }}'").spec.source.helm.values) = strload("merged_values.yaml")' -i "${{ env.DESTINATION_YAML }}"
          
          echo "Successfully replaced values in ${{ env.DESTINATION_YAML }} with merged values"
          
        else
          echo "Destination file does not exist, using only new values."
        fi

        cat "$DESTINATION_YAML"


    - name: Commit Env Changes
      env:
        NAME: ${{ env.NAME }}
        COMMIT_MESSAGE: ${{ env.COMMIT_MESSAGE }}
      run: |
        cd environment

        if output=$(git status --porcelain) && [ -z "$output" ]; then
          # Working directory clean

          echo "No changes to commit"
        else 
          # Uncommitted changes

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"   
          git add -A
          git commit -m "${{ env.COMMIT_MESSAGE }}"
        fi

    # Promotion push / PR
    - name: Push Environment Changes
      if: inputs.create_pull_request == false && inputs.preview == false
      uses: ad-m/github-push-action@master
      with:
        directory: environment
        github_token: ${{ secrets.GH_PAT }}
        repository: ${{ inputs.environment_repository }}

    # handles push with PR creation
    - name: Create Promotion Pull Request
      if: inputs.create_pull_request && inputs.preview == false
      uses: peter-evans/create-pull-request@v7
      env:
        NAME: ${{ env.NAME }}
        PR_TITLE: ${{ env.PR_TITLE }}
        PR_BODY: ${{ env.PR_BODY }}
        PR_BRANCH: ${{ env.PR_BRANCH }}
      with:
        path: environment
        branch: ${{ env.PR_BRANCH }}
        token: ${{ secrets.GH_PAT }}
        title: ${{ env.PR_TITLE }}
        body: ${{ env.PR_BODY }}

    # Preview push / PR
    - name: Push Preview Environment Changes
      if: inputs.create_pull_request && inputs.preview
      uses: ad-m/github-push-action@master
      env:
        PR_BRANCH: ${{ env.PR_BRANCH }}
      with:
        directory: environment
        github_token: ${{ secrets.GH_PAT }}
        repository: ${{ inputs.environment_repository }}
        branch: ${{ env.PR_BRANCH }}

    - name: Create Preview Pull Request
      if: inputs.create_pull_request && inputs.preview
      uses: peter-evans/create-pull-request@v7
      env:
        NAME: ${{ env.NAME }}
        PR_TITLE: ${{ env.PR_TITLE }}
        PR_BODY: ${{ env.PR_BODY }}
        PR_BRANCH: ${{ env.PR_BRANCH }}
      with:
        path: environment
        branch: ${{ env.PR_BRANCH }}
        token: ${{ secrets.GH_PAT }}
        title: ${{ env.PR_TITLE }}
        body: ${{ env.PR_BODY }}
        base: main

    - name: Find Comment
      if: inputs.preview
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: ${{ inputs.comment_body_includes_text }}

    - name: Create or update comment
      if: inputs.preview
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ${{ inputs.comment }}
        edit-mode: replace